import { describe, it, expect, vi, beforeAll, beforeEach, afterEach, afterAll } from 'vitest';
import axios from 'axios';
import MockAdapter from 'axios-mock-adapter';
import bugService from './bugService';

describe('bugService', () => {
  let mockAxios;
  const mockBugs = [
    { id: 1, title: 'Bug 1', description: 'Description 1', status: 'open' },
    { id: 2, title: 'Bug 2', description: 'Description 2', status: 'closed' }
  ];

  beforeAll(() => {
    // Mock console methods
    vi.spyOn(console, 'log').mockImplementation(() => {});
    vi.spyOn(console, 'error').mockImplementation(() => {});
  });

  beforeEach(() => {
    mockAxios = new MockAdapter(axios);
  });

  afterEach(() => {
    mockAxios.restore();
    vi.clearAllMocks();
  });

  afterAll(() => {
    // Restore original console
    vi.restoreAllMocks();
  });

  describe('getAllBugs', () => {
    it('should fetch all bugs successfully', async () => {
      mockAxios.onGet('/bugs').reply(200, { data: mockBugs });

      const result = await bugService.getAllBugs();

      expect(result).toEqual(mockBugs);
      expect(console.log).toHaveBeenCalledWith('➡️ Request: GET /bugs');
      expect(console.log).toHaveBeenCalledWith('⬅️ Response: 200 /bugs');
    });

    it('should handle error when fetching bugs', async () => {
      mockAxios.onGet('/bugs').reply(500, { error: 'Server error' });

      await expect(bugService.getAllBugs()).rejects.toThrow();
      expect(console.error).toHaveBeenCalledWith(
        '❌ API Error: Request failed with status code 500',
        { error: 'Server error' }
      );
    });
  });

  describe('getBugById', () => {
    it('should fetch a single bug by id', async () => {
      const bugId = 1;
      mockAxios.onGet(`/bugs/${bugId}`).reply(200, { data: mockBugs[0] });

      const result = await bugService.getBugById(bugId);

      expect(result).toEqual(mockBugs[0]);
      expect(console.log).toHaveBeenCalledWith(`➡️ Request: GET /bugs/${bugId}`);
      expect(console.log).toHaveBeenCalledWith(`⬅️ Response: 200 /bugs/${bugId}`);
    });

    it('should handle error when fetching a bug', async () => {
      const bugId = 999;
      mockAxios.onGet(`/bugs/${bugId}`).reply(404, { error: 'Bug not found' });

      await expect(bugService.getBugById(bugId)).rejects.toThrow();
      expect(console.error).toHaveBeenCalledWith(
        '❌ API Error: Request failed with status code 404',
        { error: 'Bug not found' }
      );
    });
  });

  describe('createBug', () => {
    it('should create a new bug', async () => {
      const newBug = { title: 'New Bug', description: 'New description', status: 'open' };
      const createdBug = { id: 3, ...newBug };
      mockAxios.onPost('/bugs').reply(201, { data: createdBug });

      const result = await bugService.createBug(newBug);

      expect(result).toEqual(createdBug);
      expect(console.log).toHaveBeenCalledWith('➡️ Request: POST /bugs');
      expect(console.log).toHaveBeenCalledWith('⬅️ Response: 201 /bugs');
    });

    it('should handle validation error when creating bug', async () => {
      const invalidBug = { title: '' }; // Missing required fields
      mockAxios.onPost('/bugs').reply(400, { error: 'Validation failed' });

      await expect(bugService.createBug(invalidBug)).rejects.toThrow();
      expect(console.error).toHaveBeenCalledWith(
        '❌ API Error: Request failed with status code 400',
        { error: 'Validation failed' }
      );
    });
  });

  describe('updateBug', () => {
    it('should update an existing bug', async () => {
      const bugId = 1;
      const updates = { status: 'closed' };
      const updatedBug = { ...mockBugs[0], ...updates };
      mockAxios.onPut(`/bugs/${bugId}`).reply(200, { data: updatedBug });

      const result = await bugService.updateBug(bugId, updates);

      expect(result).toEqual(updatedBug);
      expect(console.log).toHaveBeenCalledWith(`➡️ Request: PUT /bugs/${bugId}`);
      expect(console.log).toHaveBeenCalledWith(`⬅️ Response: 200 /bugs/${bugId}`);
    });

    it('should handle error when updating non-existent bug', async () => {
      const bugId = 999;
      mockAxios.onPut(`/bugs/${bugId}`).reply(404, { error: 'Bug not found' });

      await expect(bugService.updateBug(bugId, {})).rejects.toThrow();
      expect(console.error).toHaveBeenCalledWith(
        '❌ API Error: Request failed with status code 404',
        { error: 'Bug not found' }
      );
    });
  });

  describe('deleteBug', () => {
    it('should delete a bug successfully', async () => {
      const bugId = 1;
      mockAxios.onDelete(`/bugs/${bugId}`).reply(204);

      await expect(bugService.deleteBug(bugId)).resolves.not.toThrow();
      expect(console.log).toHaveBeenCalledWith(`➡️ Request: DELETE /bugs/${bugId}`);
      expect(console.log).toHaveBeenCalledWith(`⬅️ Response: 204 /bugs/${bugId}`);
    });

    it('should handle error when deleting non-existent bug', async () => {
      const bugId = 999;
      mockAxios.onDelete(`/bugs/${bugId}`).reply(404, { error: 'Bug not found' });

      await expect(bugService.deleteBug(bugId)).rejects.toThrow();
      expect(console.error).toHaveBeenCalledWith(
        '❌ API Error: Request failed with status code 404',
        { error: 'Bug not found' }
      );
    });
  });

  describe('interceptors', () => {
    it('should log successful requests and responses', async () => {
      mockAxios.onGet('/bugs').reply(200, { data: mockBugs });

      await bugService.getAllBugs();

      expect(console.log).toHaveBeenCalledWith('➡️ Request: GET /bugs');
      expect(console.log).toHaveBeenCalledWith('⬅️ Response: 200 /bugs');
    });

    it('should log error responses', async () => {
      mockAxios.onGet('/bugs').reply(500, { error: 'Server error' });

      await expect(bugService.getAllBugs()).rejects.toThrow();
      expect(console.error).toHaveBeenCalled();
    });
  });
});